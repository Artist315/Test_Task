// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProleiT.OeeBaseClassifiers.Storage;

namespace MasterData.Storage.Migrations
{
    [DbContext(typeof(MasterDataContext))]
    partial class MasterDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("MasterData.Storage.Enities.CounterTrend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("dtCreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nKey")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("szName")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<int>("RecordMode")
                        .HasColumnName("nRecordMode")
                        .HasColumnType("integer");

                    b.Property<Guid>("TrendId")
                        .HasColumnName("gTrendId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnName("nType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("TrendId");

                    b.ToTable("tblCounterTrend");
                });

            modelBuilder.Entity("MasterData.Storage.Enities.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("dtCreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnName("bIsUsed")
                        .HasColumnType("boolean");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nKey")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("szName")
                        .HasColumnType("text");

                    b.Property<Guid>("UnitId")
                        .HasColumnName("gUnitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("UnitId");

                    b.ToTable("tbEquipment");
                });

            modelBuilder.Entity("MasterData.Storage.Enities.ParameterTrend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("dtCreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nKey")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("szName")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<int>("RecordMode")
                        .HasColumnName("nRecordMode")
                        .HasColumnType("integer");

                    b.Property<Guid>("TrendId")
                        .HasColumnName("gTrendId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("TrendId");

                    b.ToTable("tblParameterTrend");
                });

            modelBuilder.Entity("MasterData.Storage.Enities.Trend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("dtCreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("EquipmentId")
                        .HasColumnName("gEquipmentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nKey")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("szName")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<Guid?>("UnitId")
                        .HasColumnName("gUnitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("UnitId");

                    b.ToTable("tblTrend");
                });

            modelBuilder.Entity("MasterData.Storage.Enities.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("dtCreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nKey")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("szName")
                        .HasColumnType("text");

                    b.Property<short>("Type")
                        .HasColumnName("nType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.ToTable("tblUnit");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8a5032e-6995-4826-b128-41423b2930f7"),
                            CreatedAt = new DateTime(2022, 9, 20, 12, 55, 41, 15, DateTimeKind.Utc).AddTicks(7813),
                            Key = 1,
                            Name = "Test1",
                            Type = (short)23
                        },
                        new
                        {
                            Id = new Guid("2e0685bc-e6ac-4dda-9d67-8ce361e4e760"),
                            CreatedAt = new DateTime(2022, 9, 20, 12, 55, 41, 15, DateTimeKind.Utc).AddTicks(8296),
                            Key = 2,
                            Name = "Test2",
                            Type = (short)22
                        },
                        new
                        {
                            Id = new Guid("c89e11a1-34c5-4eaf-8084-956cc5e510bf"),
                            CreatedAt = new DateTime(2022, 9, 20, 12, 55, 41, 15, DateTimeKind.Utc).AddTicks(8336),
                            Key = 3,
                            Name = "Test3",
                            Type = (short)22
                        },
                        new
                        {
                            Id = new Guid("a2664588-f699-4fe2-ad24-696c679f68b6"),
                            CreatedAt = new DateTime(2022, 9, 20, 12, 55, 41, 15, DateTimeKind.Utc).AddTicks(8341),
                            Key = 4,
                            Name = "Test4",
                            Type = (short)22
                        });
                });

            modelBuilder.Entity("MasterData.Storage.Enities.CounterTrend", b =>
                {
                    b.HasOne("MasterData.Storage.Enities.Trend", "Trend")
                        .WithMany()
                        .HasForeignKey("TrendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MasterData.Storage.Enities.Equipment", b =>
                {
                    b.HasOne("MasterData.Storage.Enities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MasterData.Storage.Enities.ParameterTrend", b =>
                {
                    b.HasOne("MasterData.Storage.Enities.Trend", "Trend")
                        .WithMany()
                        .HasForeignKey("TrendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MasterData.Storage.Enities.Trend", b =>
                {
                    b.HasOne("MasterData.Storage.Enities.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId");

                    b.HasOne("MasterData.Storage.Enities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");
                });
#pragma warning restore 612, 618
        }
    }
}
